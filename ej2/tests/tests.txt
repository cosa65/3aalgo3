void test_c3_coloreable() {
  Grafo g;
  std::set<int> color_v1{1, 2};
  g.agregar_vertice(color_v1);
  std::set<int> color_v2{1};
  g.agregar_vertice(color_v2);
  std::set<int> color_v3{3, 1};
  g.agregar_vertice(color_v3);
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(1, 2);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_barriletes_unidos_no_coloreable() {
  Grafo g;
  std::set<int> color_1{1, 2, 3};
  g.agregar_vertice(color_1); //v0
  g.agregar_vertice(color_1); //v1
  g.agregar_vertice(color_1); //v2
  g.agregar_vertice(color_1); //v3
  g.agregar_vertice(color_1); //v4
  g.agregar_vertice(color_1); //v5
  g.agregar_vertice(color_1); //v5
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(0, 6);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(2, 3);
  g.agregar_arista(3, 4);
  g.agregar_arista(3, 5);
  g.agregar_arista(4, 5);
  g.agregar_arista(4, 6);
  g.agregar_arista(5, 6);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_c3_no_coloreable() {
  Grafo g;
  std::set<int> color_v1{1};
  g.agregar_vertice(color_v1);
  std::set<int> color_v2{1};
  g.agregar_vertice(color_v2);
  std::set<int> color_v3{3};
  g.agregar_vertice(color_v3);
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(1, 2);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_k4_coloreable() {
  Grafo g;
  std::set<int> color_1{1, 2};
  std::set<int> color_2{1, 2};
  std::set<int> color_3{3, 1, 2};
  std::set<int> color_4{4, 3, 1, 2};
  g.agregar_vertice(color_4);
  g.agregar_vertice(color_3);
  g.agregar_vertice(color_2);
  g.agregar_vertice(color_1);
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(0, 3);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(2, 3);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_k6_coloreable() {
  Grafo g;
  std::set<int> color_1{1, 2, 3, 4, 5, 6};
  std::set<int> color_2{1, 2, 3};
  std::set<int> color_3{4, 5, 6};
  std::set<int> color_4{1, 2, 6};
  g.agregar_vertice(color_1); //v0
  g.agregar_vertice(color_2); //v1
  g.agregar_vertice(color_3); //v2
  g.agregar_vertice(color_4); //v3
  g.agregar_vertice(color_2); //v4
  g.agregar_vertice(color_1); //v5
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(0, 3);
  g.agregar_arista(0, 4);
  g.agregar_arista(0, 5);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(1, 4);
  g.agregar_arista(1, 5);
  g.agregar_arista(2, 3);
  g.agregar_arista(2, 4);
  g.agregar_arista(2, 5);
  g.agregar_arista(3, 4);
  g.agregar_arista(3, 5);
  g.agregar_arista(4, 5);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_k6_no_coloreable() {
  Grafo g;
  //no deberia poder colorear porque es un completo de 6 vertices y solo hay 5 colores
  std::set<int> color_1{1, 2, 3, 4};
  std::set<int> color_2{1, 2, 3};
  std::set<int> color_3{4, 3, 6};
  std::set<int> color_4{1, 2, 6};
  g.agregar_vertice(color_1); //v0
  g.agregar_vertice(color_2); //v1
  g.agregar_vertice(color_3); //v2
  g.agregar_vertice(color_4); //v3
  g.agregar_vertice(color_2); //v4
  g.agregar_vertice(color_1); //v5
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(0, 3);
  g.agregar_arista(0, 4);
  g.agregar_arista(0, 5);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(1, 4);
  g.agregar_arista(1, 5);
  g.agregar_arista(2, 3);
  g.agregar_arista(2, 4);
  g.agregar_arista(2, 5);
  g.agregar_arista(3, 4);
  g.agregar_arista(3, 5);
  g.agregar_arista(4, 5);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_barriletes_unidos_coloreable() {
  Grafo g;
  std::set<int> color_1{1, 2, 3};
  g.agregar_vertice(color_1); //v0
  g.agregar_vertice(color_1); //v1
  g.agregar_vertice(color_1); //v2
  g.agregar_vertice(color_1); //v3
  g.agregar_vertice(color_1); //v4
  g.agregar_vertice(color_1); //v5
  g.agregar_vertice(color_1); //v5
  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(2, 3);
  g.agregar_arista(3, 4);
  g.agregar_arista(3, 5);
  g.agregar_arista(4, 5);
  g.agregar_arista(4, 6);
  g.agregar_arista(5, 6);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}

void test_que_tarde() {
  Grafo g;
  std::set<int> color_0{0, 1, 2, 3, 4, 5};
  std::set<int> color_1{1, 3};
  std::set<int> color_2{0, 1, 2, 3, 4, 5};
  std::set<int> color_3{2, 3};
  std::set<int> color_4{3};
  std::set<int> color_5{0};
  std::set<int> color_6{3, 5};
  std::set<int> color_7{1, 2};
  std::set<int> color_8{1, 2};
  std::set<int> color_9{1, 2, 3};
  std::set<int> color_10{2};

  g.agregar_vertice(color_0); //v0
  g.agregar_vertice(color_1); //v1
  g.agregar_vertice(color_2); //v2
  g.agregar_vertice(color_3); //v3
  g.agregar_vertice(color_4); //v4
  g.agregar_vertice(color_5); //v5
  g.agregar_vertice(color_6); //v5
  g.agregar_vertice(color_7); //v0
  g.agregar_vertice(color_8); //v1
  g.agregar_vertice(color_9); //v2
  g.agregar_vertice(color_10); //v3

  g.agregar_arista(0, 1);
  g.agregar_arista(0, 2);
  g.agregar_arista(0, 3);
  g.agregar_arista(0, 4);
  g.agregar_arista(0, 5);
  g.agregar_arista(1, 2);
  g.agregar_arista(1, 3);
  g.agregar_arista(1, 4);
  g.agregar_arista(1, 5);
  g.agregar_arista(2, 3);
  g.agregar_arista(2, 4);
  g.agregar_arista(2, 5);
  g.agregar_arista(3, 4);
  g.agregar_arista(3, 5);
  g.agregar_arista(4, 5);
  g.agregar_arista(2, 6);
  g.agregar_arista(4, 6);
  g.agregar_arista(6, 7);
  g.agregar_arista(7, 8);
  g.agregar_arista(7, 9);
  g.agregar_arista(8, 9);
  g.agregar_arista(8, 10);
  g.agregar_arista(9, 10);
  bool res = list_coloring_backtracking(g);
  std::cout << "Se pudo colorear " << res << std::endl;
  g.imprimir();
}
